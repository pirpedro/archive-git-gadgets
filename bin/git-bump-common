#!/bin/bash

source $(git stats --script-location $0)/git-common

NOW="$(date +'%B %d, %Y')"

bump_retrieve_current_version(){
  [ -f "$VERSION_FILE" ] && ! empty $VERSION_FILE && cat "$VERSION_FILE"
}

bump_get_tagname(){
  [ -n "$1" ] || die "Parameter need to be passed."
  echo "$(git_get bump.prefix.tag)$1"
}

bump_tag_exists(){
  [ -n "$1" ] || die "Parameter need to be passed."
  local tag_name
  tag_name=$(bump_get_tagname "$1")
  git_tag_exists $tag_name
}

bump_suggest_version_number(){
  local version_number version_number_split v_major v_minor v_patch increment_type
  version_number=$(bump_retrieve_current_version)
  version_number_split=(`echo ${version_number} | tr '.' ' '`)
  v_major=${version_number_split[0]}
  v_minor=${version_number_split[1]}
  v_patch=${version_number_split[2]}

  increment_type=${1:-minor}
  case "$increment_type" in
    major )
      v_major=$((v_major + 1)); v_minor=0; v_patch=0;
      ;;
    minor )
      v_minor=$((v_minor + 1)); v_patch=0;
      ;;
    patch )
      v_patch=$((v_patch + 1));
      ;;
  esac
  echo "$v_major.$v_minor.$v_patch"
}

# Organize commit changes in CHANGELOG.md
# bump_changelog <new_version> [old_version]
bump_changelog(){
  local new_version old_version from to
  if [ "$#" -eq 2 ]; then
    new_version="$1"
    old_version="$2"
  elif [ "$#" -eq 1 ]; then
    new_version="$1"
  else
    die "You need to pass at least the new version number."
  fi
  ! empty "$TEMP_FILE" || die "Something is wrong. Reexecute 'git bump init'."
  [ -f "$CHANGELOG_FILE" ] || die "Something is wrong. Reexecute 'git bump init'."

  echo "## $new_version ($NOW)" > $TEMP_FILE
  if ! empty $old_version && bump_tag_exists $old_version; then
    from="$(bump_get_tagname $old_version)..."
  fi
  if ! empty $new_version && bump_tag_exists $new_version; then
    to="$(bump_get_tagname $new_version)"
  else
    to="HEAD"
  fi
  git log --pretty=format:"  - %s" "$from$to" >> $TEMP_FILE
  echo "" >> $TEMP_FILE
  echo "" >> $TEMP_FILE
  cat $CHANGELOG_FILE >> $TEMP_FILE
  mv $TEMP_FILE $CHANGELOG_FILE
  if flag interactive; then
    ask_boolean "Now you can make adjustments to __CHANGELOG.md__. Do you want? " "${FLAG_FALSE}"
    ! check_boolean ${ask_answer} || git_editor $CHANGELOG_FILE
  fi
  git_add $CHANGELOG_FILE
}

#Pass a version and check if it is below, equals or above current.
#Return
# 0 - if above version
# 1 - if equal version
# 2 - if below version
bump_compare_version(){
  [ -n "$1" ] || die "No version passed."
  local check_version current_version
  check_version="$1"
  current_version=$(cat $VERSION_FILE)

  if empty "$current_version"; then
    return_value=0; #means that check version is above an "empty version".
  elif equals "$check_version" "$current_version"; then
    return_value=1;
  else
    current_split=(`echo ${current_version} | tr '.' ' '`)
    check_split=(`echo ${check_version} | tr '.' ' '`)
    for i in 1 2 3; do
      if [ $(( ${check_split[$i]} + 1 )) -eq $(( ${current_split[$i]} + 1 )) ]; then
        continue;
      elif [ $(( ${check_split[$i]} + 1 )) -gt $(( ${current_split[$i]} + 1 )) ]; then
        return_value=0
      else
        return_value=2
      fi
    done
  fi

  return $return_value
}

bump_version_number(){
  local new_version current_version
  if [ "$#" -eq 1 ]; then
    new_version="$1"
  else
    die "Need to pass parameter."
  fi
  current_version=$(bump_retrieve_current_version)

  bump_compare_version "$new_version"
  [ ! "$?" -eq 1 ] || return 1; #same version, do nothing
  [ -f "$VERSION_FILE" ] || die "Something is wrong. Reexecute 'git bump init'."

  #In git init, even recursive set to true, the version file could be empty
  if ! empty $VERSION_FILE && check_boolean "$(git_get bump.recursive)"; then
    git grep -lw "$current_version" -- `git stats --root-path` | grep -v CHANGELOG.md | xargs -I {} sh -c "sed -i "s/$current_version/$new_version/g" {}; git_add {}"
  else
    echo $new_version > $VERSION_FILE
    git_add $VERSION_FILE
  fi
  note "Set version number to __${new_version}__."
}

bump_reset_changelog_file(){
  [ -f "$CHANGELOG_FILE" ] || die "Something is wrong. Reexecute 'git bump init'."
  truncate -s 0 $CHANGELOG_FILE
  bump_changelog ${1:-`bump_retrieve_current_version`}
}
