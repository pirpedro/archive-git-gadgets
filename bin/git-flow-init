#!/bin/bash

#git script variables
SUBDIRECTORY_OK="yes"

source $(git stats --script-location $0)/git-common

default(){
  local config_scope="--local";
  for arg do
    shift
    case "$arg" in
      --defaults) set_global_flag defaults ;;
      --file=* ) config_scope="--file '${arg##--file=}'";;
      local|global|system) config_scope="--$arg" ;;
      -f ) set_flag force ;;
      *) set -- "$@" "$arg"; ;;
    esac
  done

  if ! flag defaults; then
    set_global_flag interactive
    verbosity on
  fi

  if gadgets_flow_is_initialized && ! flag force; then
    warn -f "Git flow is already initialized."
    warn -f "Use 'git flow init -f' to force reinitialization."
    exit 0
  fi

  #Initialize git gadgets if necessary.
  gadgets_is_initialized || ( gadgets_init && printf "\n\n" )

  note "Starting git flow configuration!"

  local master_branch develop branch_count suggestion
  master_branch=$(git_get core.master)
  if git_config_has_develop && ! flag force; then
    develop=$(git_get flow.branch.develop)
  else
    branch_count=$(git_local_branches | grep -v "^${master_branch}\$" | wc -l)
    if [ "$branch_count" -eq 0 ]; then
      note "No candidates branches exists. We need to create one."
      suggestion=$(git_get flow.branch.develop || echo develop)
    else
      note "You have these branchs:"
      flag defaults || git_local_branches | grep -v "^${master_branch}\$" | sed 's/^.*$/   - &/g'
      suggestion=""
      for mybranch in $(git_get branch.develop) 'develop' 'int' 'integration' 'master'; do
        if git_local_branch_exists "$mybranch" && [ "$mybranch" != "$master_branch" ]; then
          suggestion="${mybranch}"
          break
        fi
      done
    fi

    if flag defaults; then
      develop=$suggestion
    else
      ask --default="${suggestion:-develop}" --free-answer --question="Choose name for integration (develop) branch"
      develop=${ask_answer}
    fi

  fi

  if [[ "$master_branch" = "$develop" ]]; then
    die "Master and develop branch must differ."
  fi

  git_set flow.branch.develop "$develop"

  if ! git_local_branch_exists "$develop"; then
    if git_remote_branch_exists "$ORIGIN/$develop"; then
      git branch "$develop" "$ORIGIN/$develop">/dev/null 2>&1
    else
      git branch --no-track "$develop" "$master_branch"
    fi
  fi

  if ! gadgets_flow_is_initialized; then die "Something went wrong in the setup."; fi

  git checkout -q "$develop" || die "Not possible to checkout branch $develop."

  local prefix_suggestion
  for prefix in 'feature' 'release' 'hotfix'; do
    if ! git_get flow.prefix."$prefix" >/dev/null 2>&1 || flag force; then
      prefix_suggestion=$(git_get flow.prefix."$prefix" || echo "$prefix/")
      ! flag defaults || ( git_set flow.prefix."$prefix" $prefix_suggestion && continue )
      ask_boolean "Do you want to use $prefix branches"
      if check_boolean "$ask_answer"; then
        ask --question="$prefix branches prefix" --default="$prefix_suggestion" --free-answer
        git_set flow.prefix."$prefix" "${ask_answer}"
      else
        git_set flow.prefix."$prefix"
      fi
    fi
  done

  if ! gadgets_bump_is_initialized; then
    printf "\n\n"
    note "Git bump is an extension that bump version to your project."
    note "Git flow can use it to organize version during his usage."
    ask_boolean "Do you want to configure __git bump__ to this repository?"
    ! check_boolean ${ask_answer} || ( printf "\n\n" && git bump init )
  fi
}
