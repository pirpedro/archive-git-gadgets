#!/bin/bash

#git script variables
SUBDIRECTORY_OK="yes"

USAGE=`cat << EOF
version [OPTIONS] [INCREMENT] [BRANCH]

  INCREMENT
    Optional parameter that change the increment in version.
    The default version format is 'major.minor.patch' with
    minor increments if the parameter was not mentioned.

  OPTIONS

    -i | --interactive  Use interactive mode.

    -p | --push         Push to remote the current changes.

    -R | --recursive    Recursive find/replace git project by version
                        pattern.

    -v | --version      Specify your own version number for the bump.

EOF`

source $(git stats --script-location $0)/git-bump-common

default(){
  local target_branch latest_hash current_version bump_version new_branch

  for arg do
    shift
    case "$arg" in
      major|minor|patch) INCREMENT="$arg"; ;;
      --branch) set_flag branch; new_branch=${arg##--branch=}; ;;
      -i|--interactive) set_global_flag interactive; verbosity on; ;;
      -p|--push) set_global_flag push; ;;
      -R|--recursive) set_global_flag recursive; ;;
      --version=*)
        PARAM_VERSION=${arg##--version=}
        ! empty $PARAM_VERSION || die "You need to pass version number"
        ;;
      -*|--*) echo "foca" ;;
      *) set -- "$@" "$arg"; ;;
    esac
  done



  # set the git bump target branch.
  if ! startswith "$1" "-"; then target_branch="$1"; else target_branch=$CURRENT_BRANCH; fi

  latest_hash=`git log --pretty=format:'%h' -n 1`

  current_version=$(bump_retrieve_current_version)
  note "Current version: __${current_version}__"
  note "Latest commit hash: __${latest_hash}__"

  bump_version="${PARAM_VERSION:-`bump_suggest_version_number "$INCREMENT"`}"

  # bump version handle only with above version.
  if ! bump_compare_version "$bump_version"; then
    die "New version is not above current version. Use 'git bump revert-to' instead."
  fi

  if flag interactive; then
    ask --question="Enter a version number" --default="$bump_version" --free-answer
    bump_version=${ask_answer}
  fi
  note "Will set new version to __${bump_version}__."

  if flag interactive && ! flag branch; then
    ask_boolean "Create new branch?"
    if check_boolean ${ask_answer}; then
      set_flag branch;
    fi
  fi

  if flag branch; then
    new_branch=${new_branch:-$bump_version}
  fi

  if flag interactive && flag branch; then
    ask --question="Enter new branch name" --default="$new_branch" --free-answer
    new_branch="${ask_answer}"
  fi

  if ! empty $new_branch; then
    git_checkout $new_branch $target_branch
  fi

  bump_version_number "$bump_version" && bump_changelog "$bump_version" "$BASE_STRING"
  git_commit bump-version "${bump_version}"

  if flag interactive && ! flag commit; then
    ask_boolean "Commit and create tag to branch?"
    if check_boolean ${ask_answer}; then set_flag commit; fi
  fi

  if flag interactive && ! flag push; then
    ask_boolean "Push changes to __${target_branch}__ branch?"
    if check_boolean ${ask_answer}; then set_flag push; fi
  fi

  if flag push || flag commit; then
    git commit -m "Bump version to ${bump_version}."
    git tag -a -m "Tag version $bump_version." "v${bump_version}"
  fi

  if flag push; then
    git_checkout $target_branch
    if ! empty $new_branch; then git merge --no-ff $new_branch; fi
    git push origin $target_branch
    git push origin --tags
    note "Pushing new version to the __${ORIGIN}__..."
  fi
}
