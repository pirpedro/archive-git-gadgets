#!/bin/bash

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGELOG.md (under the title of the new version
# number), give user a chance to review and update the changelist
# manually if needed and create a GIT tag.

#git scritp variables
SUBDIRECTORY_OK="yes"
USAGE=`cat << EOF
[OPTIONS] [INCREMENT] [BRANCH]

  INCREMENT
    Optional parameter that change the increment in version.
    The default version format is 'major.minor.patch' with
    minor increments if the parameter was not mentioned.

  OPTIONS

    -c | --commit       Commit and tag version changes.

    --hotfix            Inform that a new hotfix branch will
                        be created. Increment by 'patch' if
                        no parameter was passed.

    -i | --interactive  Use interactive mode.

    -p | --push         Push to remote the current changes.

    -r | --release      Inform that a new release branch will
                        be created.

    -R | --recursive    Recursive find/replace git project by version
                        pattern.

    -t | --tag          Regenerate the current tag if exists new commits.

    -v | --version      Specify your own version number for the bump.

EOF`

VERSION_FILE=$(git stats --root-path)/.version
CHANGELOG_FILE=$(git stats --root-path)/CHANGELOG.md
TEMP_FILE=$(git stats --root-path)/tmpfile

source $(git stats --script-location $0)/git-bump-common

load_settings

if [ "$1" == "init" ]; then
  shift; initialize "$@";
elif ! git_bump_is_initialized; then
  die "Bump is not initialized. Please execute 'git bump init' to start setup."
fi

if [ "$1" == "untrack" ]; then shift; untrack_branch "$@"; fi

for arg do
  shift
  case "$arg" in
    major|minor|patch) INCREMENT="$arg"; ;;
    -c|commit) set_global_flag commit; ;;
    --hotfix) set_global_flag hotfix; ;;
    -i|--interactive) set_global_flag interactive; verbosity on; ;;
    -p|--push) set_global_flag push; ;;
    -r|--release) set_global_flag release; ;;
    -R|--recursive) set_global_flag recursive; ;;
    -t|--tag)
      version=$(cat .version)
      if [[ `git tag -l "v$version"` ]]; then
          if [[ `git rev-list --count v$version..HEAD` -gt 0 ]]; then
            git tag -d $version
            note "Removing current tag."
          else
            note "No changes made since last tag. Nothing to do."
            exit;
          fi
      fi
      git_editor $CHANGELOG_FILE
      note "Creating new tag for version __${version}__."
      git add $VERSION_FILE $CHANGELOG_FILE
      git tag -a -m "Tag version $version." "v$version"
      exit;
      ;;
    --version=*)
      PARAM_VERSION=${arg##--version=}
      if test -z $PARAM_VERSION; then
        die "You need to pass version number"
      fi
      ;;
    *) set -- "$@" "$arg"; ;;
  esac
done

if ! startswith "$1" "-"; then TARGET_BRANCH="$1"; fi
TARGET_BRANCH=${TARGET_BRANCH:-`git stats --long-current-branch`}
LATEST_HASH=`git log --pretty=format:'%h' -n 1`

check_version_file_exists
check_change_log_file_exists

OLD_VERSION=$(retrieve_current_version)
note "Current version: __${OLD_VERSION}__"
note "Latest commit hash: __${LATEST_HASH}__"

if flag hotfix && [ -z $INCREMENT ]; then INCREMENT=patch; fi

SUGGESTED_VERSION="${PARAM_VERSION:-`suggest_version_number "$INCREMENT"`}"

if flag interactive; then
  ask --question="Enter a version number" --default="$SUGGESTED_VERSION" --free-answer
  SUGGESTED_VERSION=${ask_answer}
fi
note -f "Will set new version to be __${SUGGESTED_VERSION}__."

if flag interactive && ! flag hotfix && ! flag release; then
  ask --question="Create new branch?" --options="no,release,hotfix" --default="no"
  case "${ask_answer}" in
    hotfix )
      set_global_flag hotfix
      ;;
    release )
      set_global_flag release
      ;;
  esac
fi
if flag hotfix; then
  NEW_BRANCH=$(git_get bump.prefix.hotfix)$SUGGESTED_VERSION
elif flag release; then
  NEW_BRANCH=$(git_get bump.prefix.release)$SUGGESTED_VERSION
fi

if flag interactive && (flag hotfix  || flag release); then
  ask --question="Enter new branch name" --default="$NEW_BRANCH" --free-answer
  NEW_BRANCH="${ask_answer}"
fi

if [[ ! -z "$NEW_BRANCH" ]]; then
  git checkout -b $NEW_BRANCH $TARGET_BRANCH
fi

#handling the version number changes
bump_version_number ${$SUGGESTED_VERSION}
bump_changelog $SUGGESTED_VERSION $BASE_STRING

if flag interactive && ! flag commit; then
  ask_boolean "Commit and create tag to branch?"
  if check_boolean ${ask_answer}; then set_flag commit; fi
fi

if flag interactive && ! flag push; then
  ask_boolean "Push changes to __${TARGET_BRANCH}__ branch?"
  if check_boolean ${ask_answer}; then set_flag push; fi
fi

if flag push || flag commit; then
  git commit -m "Bump version to ${SUGGESTED_VERSION}."
  git tag -a -m "Tag version ${SUGGESTED_VERSION}." "v${SUGGESTED_VERSION}"
fi

if flag push; then
  git checkout $TARGET_BRANCH
  if [[ ! -z $NEW_BRANCH ]]; then git merge --no-ff $NEW_BRANCH; fi
  git push origin $TARGET_BRANCH
  git push origin --tags
  echo -e "${NOTICE_FLAG} Pushing new version to the ${WHITE}origin${CYAN}..."
fi
