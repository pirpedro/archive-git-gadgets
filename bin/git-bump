#!/bin/bash

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGELOG.md (under the title of the new version
# number), give user a chance to review and update the changelist
# manually if needed and create a GIT tag.

NOW="$(date +'%B %d, %Y')"
COLOR_RED="\033[1;31m"
COLOR_GREEN="\033[0;32m"
COLOR_YELLOW="\033[1;33m"
COLOR_BLUE="\033[1;34m"
COLOR_PURPLE="\033[1;35m"
COLOR_CYAN="\033[1;36m"
COLOR_WHITE="\033[1;37m"
COLOR_RESET="\033[0m"

QUESTION_FLAG="${GREEN}?"
WARNING_FLAG="${YELLOW}!"
NOTICE_FLAG="${CYAN}‚ùØ"

INTERACTIVE=false
INCREMENT=""
PUSH_BRANCH=""
RELEASE_BRANCH=""
RECURSIVE=false
PARAM_VERSION=""

function usage(){
  cat << EOF
USAGE $0 [VERSION] [OPTIONS]

  OPTIONS

    -i | --interactive
    -p | --push
    -r | --release
    -R
    -S

    --increment
EOF
  return;
}

while [[ "$#" -gt 0 ]]; do
  if [[ "$1" != -* ]]; then break; fi
  key="$1"; shift;
  if [[ ! -z $1 && "$1" != -* ]]; then value="$1"; fi
  case $key in
    -h|--help)
      usage
      exit
      ;;
    --hotfix)
      HOTFIX_BRANCH=${value}
      -z $value || shift
      ;;
    -i|--interactive)
      INTERACTIVE=true
      ;;
    --increment)
      INCREMENT=${value}
      -z $value || shift
      ;;
    -p|--push)
      PUSH_BRANCH=${value}
      -z $value || shift
      ;;
    -r|--release)
      RELEASE_BRANCH=${value}
      -z $value || shift
      ;;
    -R|--recursive)
      RECURSIVE=true
      ;;
    -S)
      GPG_SIGN="-S"
      ;;
    # Unknown option. No need for an error, getopts informs
    # the user itself.
    \?) exit 1;;
  esac
done

if [[ "$1" != -* ]]; then PARAM_VERSION="$1"; fi

#echo "Hotfix: ${HOTFIX_BRANCH}"
#echo "Interactive: ${INTERACTIVE}, Increment: ${INCREMENT}"
#echo "PUSH_BRANCH: ${PUSH_BRANCH}, Release: ${RELEASE_BRANCH}"
#echo "RECURSIVE: ${RECURSIVE}, Sign: ${GPG_SIGN}"
#echo "Input version: ${PARAM_VERSION}"

LATEST_HASH=`git log --pretty=format:'%h' -n 1`

ADJUSTMENTS_MSG="${QUESTION_FLAG} ${CYAN}Now you can make adjustments to ${WHITE}CHANGELOG.md${CYAN}. Then press enter to continue."
PUSHING_MSG="${NOTICE_FLAG} Pushing new version to the ${WHITE}origin${CYAN}..."

if [[ ! -f .version ]]; then
  if [[ "$INTERACTIVE" == true ]]; then
    echo -e "${WARNING_FLAG} Could not find a .version file."
    echo -ne "${QUESTION_FLAG} ${CYAN}Do you want to create a version file and start from scratch? [${WHITE}y${CYAN}]: "
    read RESPONSE
    if [ "$RESPONSE" = "" || "$RESPONSE" = "Y" || "$RESPONSE" = "Yes" || "$RESPONSE" = "yes" || "$RESPONSE" = "YES"]; then RESPONSE="y"; fi
  else
    RESPONSE="y"
  fi

  if [ "$RESPONSE" = "y" ]; then
      echo "${PARAM_VERSION-0.0.0}" > .version
  fi
fi

BASE_STRING=`cat .version`
BASE_LIST=(`echo $BASE STRING | tr '.' ' '`)
V_MAJOR=${BASE_LIST[0]}
V_MINOR=${BASE_LIST[1]}
V_PATCH=${BASE_LIST[2]}
[ "$INTERACTIVE" == false ] || echo -e "${NOTICE_FLAG} Current version: ${COLOR_WHITE}$BASE_STRING"
[ "$INTERACTIVE" == false ] || echo -e "${NOTICE_FLAG} Latest commit hash: ${COLOR_WHITE}$LATEST_HASH"
V_MINOR=$((V_MINOR + 1))
V_PATCH=0
SUGGESTED_VERSION="${PARAM_VERSION-$V_MAJOR.$V_MINOR.$V_PATCH}"

if [[ "$INTERACTIVE" == true ]]; then
  echo -ne "${QUESTION_FLAG} ${CYAN}Enter a version number [${WHITE}$SUGGESTED_VERSION${CYAN}]: "
  read INPUT_STRING
  if [ "$INPUT_STRING" != "" ]; then
      SUGGESTED_VERSION = $INPUT_STRING
  fi
fi

echo -e "${NOTICE_FLAG} Will set new version to be ${WHITE}$SUGGESTED_VERSION"
echo $SUGGESTED_VERSION > .version
echo "## $SUGGESTED_VERSION ($NOW)" > tmpfile
git log --pretty=format:"  - %s" "v$BASE_STRING"...HEAD >> tmpfile
echo "" >> tmpfile
echo "" >> tmpfile
cat CHANGELOG.md >> tmpfile
mv tmpfile CHANGELOG.md
if [[ "$INTERACTIVE" == true ]]; then
  echo -e "$ADJUSTMENTS_MSG"
  read
  echo -e "$PUSHING_MSG"
fi

#git add CHANGELOG.md VERSION
#git commit -m "Bump version to ${INPUT_STRING}."
#git tag -a -m "Tag version ${INPUT_STRING}." "v$INPUT_STRING"
#git push origin --tags
