#!/bin/bash

# this script will display the current version, automatically
# suggest a "minor" version update, and ask for input to use
# the suggestion, or a newly entered value.

# once the new version number is determined, the script will
# pull a list of changes from git history, prepend this to
# a file called CHANGELOG.md (under the title of the new version
# number), give user a chance to review and update the changelist
# manually if needed and create a GIT tag.

#git scritp variables
SUBDIRECTORY_OK="yes"
USAGE=`cat << EOF
[OPTIONS] [INCREMENT] [BRANCH]

  INCREMENT
    Optional parameter that change the increment in version.
    The default version format is 'major.minor.patch' with
    minor increments if the parameter was not mentioned.

  OPTIONS

    -c | --commit       Commit and tag version changes.

    --hotfix            Inform that a new hotfix branch will
                        be created. Increment by 'patch' if
                        no parameter was passed.

    -i | --interactive  Use interactive mode.

    -p | --push         Push to remote the current changes.

    -r | --release      Inform that a new release branch will
                        be created.

    -R | --recursive    Recursive find/replace git project by version
                        pattern.

    -t | --tag          Regenerate the current tag if exists new commits.

    -v | --version      Specify your own version number for the bump.

EOF`

source $(git stats --script-location $0)/git-common

NOW="$(date +'%B %d, %Y')"

VERSION_FILE=$(git stats --root-path)/.version
CHANGELOG_FILE=$(git stats --root-path)/CHANGELOG.md
TEMP_FILE=$(git stats --root-path)/tmpfile

for arg do
  shift
  case "$arg" in
    major|minor|patch) INCREMENT="$arg"; ;;
    -c|commit) set_flag commit; ;;
    --hotfix) set_flag hotfix; ;;
    -i|--interactive) set_flag interactive; verbosity on; ;;
    -p|--push) set_flag push; ;;
    -r|--release) set_flag release; ;;
    -R|--recursive) set_flag recursive; ;;
    -t|--tag)
      version=$(cat .version)
      if [[ `git tag -l "v$version"` ]]; then
          if [[ `git rev-list --count v$version..HEAD` -gt 0 ]]; then
            git tag -d $version
            echo -e "${NOTICE_FLAG} Removing current tag."
          else
            echo -e "${WARNING_FLAG} No changes made since last tag. Nothing to do."
            exit;
          fi
      fi
      git_editor $CHANGELOG_FILE
      echo -e "${NOTICE_FLAG} Creating new tag for version ${COLOR_WHITE}$version${COLOR_GREEN}."
      git add $VERSION_FILE $CHANGELOG_FILE
      git tag -a -m "Tag version $version." "v$version"
      exit;
      ;;
    --version=*)
      PARAM_VERSION=${arg##--version=}
      if test -z $PARAM_VERSION; then
        echo "You need to pass version number"; exit 1;
      fi
      ;;
    *) set -- "$@" "$arg"; ;;
  esac
done

if ! startswith "$1" "-"; then TARGET_BRANCH="$1"; fi
TARGET_BRANCH=${TARGET_BRANCH:-`git stats --long-current-branch`}

LATEST_HASH=`git log --pretty=format:'%h' -n 1`

if [[ ! -f $VERSION_FILE ]]; then
  if flag interactive; then
    warn -f "Could not find a .version file."
    ask_boolean "Do you want to create a version file and start from scratch?"

  fi
  if ! flag interactive || check_boolean "${ask_answer}"; then
      echo "${PARAM_VERSION:-0.0.0}" > $VERSION_FILE
      echo "" > $CHANGELOG_FILE
      note -f "Created '.version' and 'CHANGELOG.md' files in project root."
  else
    exit 1;
  fi
fi

BASE_STRING=`cat $VERSION_FILE`
BASE_LIST=(`echo $BASE_STRING | tr '.' ' '`)
V_MAJOR=${BASE_LIST[0]}
V_MINOR=${BASE_LIST[1]}
V_PATCH=${BASE_LIST[2]}
note "Current version: __${BASE_STRING}__"
note "Latest commit hash: __${LATEST_HASH}__"

if flag hotfix && [ -z $INCREMENT ]; then INCREMENT=patch; fi
INCREMENT=${INCREMENT:-minor}
case "$INCREMENT" in
  major )
    V_MAJOR=$((V_MAJOR + 1)); V_MINOR=0; V_PATCH=0;
    ;;
  minor )
    V_MINOR=$((V_MINOR + 1)); V_PATCH=0;
    ;;
  patch )
    V_PATCH=$((V_PATCH + 1));
    ;;
esac
SUGGESTED_VERSION="${PARAM_VERSION:-$V_MAJOR.$V_MINOR.$V_PATCH}"

if flag interactive; then
  ask --question="Enter a version number" --default="$SUGGESTED_VERSION" --free-answer
  SUGGESTED_VERSION=${ask_answer}
fi
note -f "Will set new version to be __${SUGGESTED_VERSION}__."

if flag interactive && ! flag hotfix && ! flag release; then
  ask --question="Create new branch?" --options="no,release,hotfix" --default="no"
  case "${ask_answer}" in
    hotfix )
      set_flag hotfix
      ;;
    release )
      set_flag release
      ;;
  esac
fi
if flag hotfix; then
  NEW_BRANCH=hotfix/$SUGGESTED_VERSION
elif flag release; then
  NEW_BRANCH=release/$SUGGESTED_VERSION
fi

if flag interactive && (flag hotfix  || flag release); then
  ask --question="Enter new branch name" --default="$NEW_BRANCH" --free-answer
  NEW_BRANCH="${ask_answer}"
fi

if [[ ! -z "$NEW_BRANCH" ]]; then
  git checkout -b $NEW_BRANCH $TARGET_BRANCH
fi

#handling the version number changes

if ! flag recursive && flag interactive; then
  ask_boolean "Recursively replace version number in project?"
  if check_boolean "${ask_answer}"; then set_flag recursive; fi
fi
if flag recursive; then
  git grep -lw "$BASE_STRING" -- `git rev-parse --show-toplevel` | grep -v CHANGELOG.md | xargs -I {} sh -c "sed -i "s/$BASE_STRING/$SUGGESTED_VERSION/g" {}; git add {}"
else
  echo $SUGGESTED_VERSION > $VERSION_FILE
  git add $VERSION_FILE
fi

echo "## $SUGGESTED_VERSION ($NOW)" > $TEMP_FILE
if git_tag_exists "v$BASE_STRING"; then
  git log --pretty=format:"  - %s" "v$BASE_STRING"...HEAD >> $TEMP_FILE
else
  git log --pretty=format:"  - %s" >> $TEMP_FILE
fi
echo "" >> $TEMP_FILE
echo "" >> $TEMP_FILE
cat $CHANGELOG_FILE >> $TEMP_FILE
mv $TEMP_FILE $CHANGELOG_FILE
if flag interactive; then
  note "Now you can make adjustments to __CHANGELOG.md__. Then press enter to continue."
  git_editor $CHANGELOG_FILE
fi

git add $CHANGELOG_FILE

if flag interactive && ! flag commit; then
  ask_boolean "Commit and create tag to branch?"
  if check_boolean ${ask_answer}; then set_flag commit; fi
fi

if flag interactive && ! flag push; then
  ask_boolean "Push changes to __${TARGET_BRANCH}__ branch?"
  if check_boolean ${ask_answer}; then set_flag push; fi
fi

if flag push || flag commit; then
  git commit -m "Bump version to ${SUGGESTED_VERSION}."
  git tag -a -m "Tag version ${SUGGESTED_VERSION}." "v${SUGGESTED_VERSION}"
fi

if flag push; then
  git checkout $TARGET_BRANCH
  if [[ ! -z $NEW_BRANCH ]]; then git merge --no-ff $NEW_BRANCH; fi
  git push origin $TARGET_BRANCH
  git push origin --tags
  echo -e "${NOTICE_FLAG} Pushing new version to the ${WHITE}origin${CYAN}..."
fi
